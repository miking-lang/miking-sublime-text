%YAML 1.2
---
name: MCore
file_extensions:
  - mc
scope: source.mcore

variables:
  builtin_ident: '(?:unit|addi|subi|muli|divi|modi|negi|lti|leqi|gti|geqi|eqi|neqi|slli|srli|srai|arity|addf|subf|mulf|divf|negf|ltf|leqf|gtf|geqf|eqf|neqf|char2int|int2char|int2float|string2float|length|concat|reverse|splitAt|makeSeq|cons|snoc|get|set|print|dprint|argv|readFile|writeFile|fileExists|deleteFile|error|floorfi|ceilfi|roundfi)'
  reserved_ident: '(?:if|then|else|match|with|let|recursive|utest|lam|lang|syn|sem|con|type|use|in|using|end|mexpr|never|switch|case|all|external)'
  type_ident: '(?:Unknown|Bool|Int|Float|Char|String)'
  ident: '(?:[a-z_][a-zA-Z_0-9]*)'
  conident: '(?:[A-Z][a-zA-Z_0-9]*)'
  escapechar: '(?:\\(?:[?abfnrtv"\\]|''))'

# Context parsing
contexts:
  prototype:
    - include: comment
    - include: illegal-open-rparen
    - include: illegal-open-rsquare
    - include: illegal-open-rcurly

  prototype-ignore-rparen:
    - include: comment
    - include: illegal-open-rsquare
    - include: illegal-open-rcurly

  prototype-ignore-rsquare:
    - include: comment
    - include: illegal-open-rparen
    - include: illegal-open-rcurly

  prototype-ignore-rcurly:
    - include: comment
    - include: illegal-open-rparen
    - include: illegal-open-rsquare

  main:
    - include: top-level

  top-level:
    - include: top-include
    - include: top-lang
    - include: top-let
    - include: top-recursive
    - include: top-con
    - include: top-type
    - include: top-utest
    - include: top-external
    - include: top-mexpr

  top-level-pushed:
    - include: top-include-pushed
    - include: top-lang-pushed
    - include: top-let-pushed
    - include: top-recursive-pushed
    - include: top-con-pushed
    - include: top-type-pushed
    - include: top-utest-pushed
    - include: top-external-pushed
    - include: top-mexpr-pushed

  ###          ###
  ### Comments ###
  ###          ###
  comment:
    - include: comment-line
    - include: comment-block
    - include: comment-block-illegal

  comment-line:
    - match: '--'
      scope: comment.line.mcore
      push:
        - match: '\n'
          scope: comment.line.mcore
          pop: true
        - include: comment-line-content
  comment-line-content:
    - match: '.'
      scope: comment.line.mcore

  comment-block:
    - match: '[/]-'
      scope: comment.block.mcore
      push:
        - match: '-[/]'
          scope: comment.block.mcore
          pop: true
        - include: comment-block-content
  comment-block-content:
    - include: comment-block # <-- checks nested block comments
    - match: '.'
      scope: comment.block.mcore

  # This ending is illegal outside of a block comment
  comment-block-illegal:
    - match: '-[/]'
      scope: invalid.illegal.block.mcore

  ###                                             ###
  ### Illegal RParen/RSquareBracket/RCurlyBracket ###
  ###                                             ###
  illegal-open-rparen:
    - match: '\)'
      scope: invalid.illegal.rparen.mcore
  illegal-open-rsquare:
    - match: '\]'
      scope: invalid.illegal.rsquare.mcore
  illegal-open-rcurly:
    - match: '\}'
      scope: invalid.illegal.rcurly.mcore

  ###                               ###
  ### Top-Level Include Expressions ###
  ###                               ###
  top-include:
    - match: '\b(include)\b'
      scope: keyword.control.import.include.mcore
      push: [string-pushed]

  top-include-pushed:
    - match: '\b(include)\b'
      scope: keyword.control.import.include.mcore
      set: [string-pushed]

  ###                            ###
  ### Top-Level Lang Expressions ###
  ###                            ###
  top-lang:
    - match: '\b(lang)\b'
      scope: keyword.directive.lang.mcore
      push: [top-lang-entry-pushed, identifier-classdef-pushed]

  top-lang-pushed:
    - match: '\b(lang)\b'
      scope: keyword.directive.lang.mcore
      set: [top-lang-entry-pushed, identifier-classdef-pushed]

  top-lang-entry-pushed:
      # Check what comes after 'lang'
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [top-lang-eqexpr-pushed, identifier-pushed]
    - include: top-lang-end-or-more-pushed

  top-lang-eqexpr-pushed:
      # lang X = ...
    - match: '(\+)'
      scope: keyword.operator.combine.mcore
      set: [top-lang-eqexpr-pushed, identifier-pushed]
    - include: top-lang-end-or-more-pushed

  top-lang-end-or-more-pushed:
    - match: '\b(end)\b'
      scope: keyword.control.end.mcore
      pop: true
    - include: top-lang-syn-entry-pushed
    - include: top-lang-sem-entry-pushed
    - include: top-lang-type-entry-pushed

  top-lang-syn-entry-pushed:
    - match: '\b(syn)\b'
      scope: keyword.other.syn.mcore
      set: [top-lang-syn-body-pushed, eqoperator-pushed, identifier-typedef-pushed]

  top-lang-syn-body-pushed:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [typeexpr-pushed-breaksynbody, identifier-typedef-pushed]
    - include: top-lang-end-or-more-pushed

  top-lang-sem-entry-pushed:
    - match: '\b(sem)\b'
      scope: keyword.other.sem.mcore
      set: [top-lang-sem-preamble-pushed, identifier-funcdef-pushed]

  top-lang-sem-preamble-pushed:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [top-lang-sem-body-pushed]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [top-lang-sem-preamble-pushed, typeexpr-pushed-breakrparen, colon-pushed, identifier-pushed]

  top-lang-sem-body-pushed:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [mexpr-pushed-breaksembody, pattern-pushed-breakrightarrow]
    - include: top-lang-end-or-more-pushed

  top-lang-type-entry-pushed:
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [typeexpr-pushed-breaklang-end-or-more, eqoperator-pushed, identifier-typedef-pushed]

  ###                           ###
  ### Top-Level Let Expressions ###
  ###                           ###
  top-let:
    - match: '\b(let)\b'
      scope: keyword.directive.let.mcore
      push: [mexpr-pushed-breaktoplevel, optidenttype-pushed-breakeq, identifier-funcdef-pushed]

  top-let-pushed:
    - match: '\b(let)\b'
      scope: keyword.directive.let.mcore
      set: [mexpr-pushed-breaktoplevel, optidenttype-pushed-breakeq, identifier-funcdef-pushed]

  ###                                 ###
  ### Top-Level Recursive Expressions ###
  ###                                 ###
  top-recursive:
    - match: '\b(recursive)\b'
      scope: keyword.directive.recursive.mcore
      push: [top-recursive-body-pushed]

  top-recursive-pushed:
    - match: '\b(recursive)\b'
      scope: keyword.directive.recursive.mcore
      set: [top-recursive-body-pushed]

  top-recursive-body-pushed:
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaktoprecbody, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true

  ###                           ###
  ### Top-Level Con Expressions ###
  ###                           ###
  top-con:
    - match: '\b(con)\b'
      scope: keyword.directive.con.mcore
      push: [optidenttype-pushed-breaktoplevel, identifier-typedef-pushed]

  top-con-pushed:
    - match: '\b(con)\b'
      scope: keyword.directive.con.mcore
      set: [optidenttype-pushed-breaktoplevel, identifier-typedef-pushed]

  ###                            ###
  ### Top-Level Type Expressions ###
  ###                            ###
  top-type:
    - match: '\b(type)\b'
      scope: keyword.directive.type.mcore
      push: [opttypetype-pushed-breaktoplevel, identifier-typedef-pushed]

  top-type-pushed:
    - match: '\b(type)\b'
      scope: keyword.directive.type.mcore
      set: [opttypetype-pushed-breaktoplevel, identifier-typedef-pushed]

  ###                             ###
  ### Top-Level UTest Expressions ###
  ###                             ###
  top-utest:
    - match: '\b(utest)\b'
      scope: keyword.directive.utest.mcore
      push: [mexpr-pushed-breaktoplevel-or-utestusing, mexpr-pushed-breakwith]

  top-utest-pushed:
    - match: '\b(utest)\b'
      scope: keyword.directive.utest.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, mexpr-pushed-breakwith]

  ###                                ###
  ### Top-Level External Expressions ###
  ###                                ###
  top-external:
    - match: '\b(external)\b'
      scope: keyword.directive.external.mcore
      push: [typeexpr-pushed-breaktoplevel, optbang-colon-pushed, identifier-pushed]

  top-external-pushed:
    - match: '\b(external)\b'
      scope: keyword.directive.external.mcore
      set: [typeexpr-pushed-breaktoplevel, optbang-colon-pushed, identifier-pushed]

  ###                             ###
  ### Top-Level MExpr Expressions ###
  ###                             ###
  top-mexpr:
    - match: '\b(mexpr)\b'
      scope: keyword.directive.mexpr.mcore
      push: [mexpr-pushed-breaktoplevel]

  top-mexpr-pushed:
    - match: '\b(mexpr)\b'
      scope: keyword.directive.mexpr.mcore
      set: [mexpr-pushed-breaktoplevel]

  ###                   ###
  ### MExpr Expressions ###
  ###                   ###
  mexpr-pushed-breaktoplevel:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breaktoplevel, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breaktoplevel, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breaktoplevel, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaktoplevel, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breaktoplevel, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breaktoplevel, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breaktoplevel, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breaktoplevel, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breaktoplevel, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breaktoplevel, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breaktoplevel, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breaktoplevel
  mexpr-pushed-breaktoplevel-or-utestusing:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breaktoplevel-or-utestusing, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breaktoplevel-or-utestusing
  mexpr-pushed-breakrecbody:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakrecbody, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakrecbody, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakrecbody, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecbody, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakrecbody, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakrecbody, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakrecbody, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakrecbody, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakrecbody, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakrecbody, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakrecbody, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakrecbody
  mexpr-pushed-breaktoprecbody:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breaktoprecbody, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breaktoprecbody, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breaktoprecbody, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaktoprecbody, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breaktoprecbody, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breaktoprecbody, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breaktoprecbody, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breaktoprecbody, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breaktoprecbody, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breaktoprecbody, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breaktoprecbody, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breaktoprecbody
  mexpr-pushed-breaktuple:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breaktuple, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breaktuple, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breaktuple, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaktuple, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breaktuple, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breaktuple, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breaktuple, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breaktuple, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breaktuple, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breaktuple, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breaktuple, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breaktuple
  mexpr-pushed-breakseq:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakseq, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakseq, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakseq, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakseq, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakseq, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakseq, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakseq, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakseq, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakseq, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakseq, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakseq, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakseq
  mexpr-pushed-breakrecordcontinued:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakrecordcontinued, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakrecordcontinued, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakrecordcontinued, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecordcontinued, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakrecordcontinued, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakrecordcontinued, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakrecordcontinued, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakrecordcontinued, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakrecordcontinued, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakrecordcontinued, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakrecordcontinued, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakrecordcontinued
  mexpr-pushed-breakrecordwith:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakrecordwith, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakrecordwith, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakrecordwith, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecordwith, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakrecordwith, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakrecordwith, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakrecordwith, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakrecordwith, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakrecordwith, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakrecordwith, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakrecordwith, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakrecordwith
  mexpr-pushed-breakrecordend:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakrecordend, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakrecordend, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakrecordend, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecordend, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakrecordend, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakrecordend, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakrecordend, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakrecordend, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakrecordend, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakrecordend, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakrecordend, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakrecordend
  mexpr-pushed-breaksembody:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breaksembody, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breaksembody, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breaksembody, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaksembody, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breaksembody, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breaksembody, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breaksembody, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breaksembody, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breaksembody, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breaksembody, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breaksembody, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breaksembody
  mexpr-pushed-breakin:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakin, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakin, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakin, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakin, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakin, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakin, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakin, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakin, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakin, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakin, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakin, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakin
  mexpr-pushed-breakin-or-utestusing:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakin-or-utestusing, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakin-or-utestusing, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakin-or-utestusing, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakin-or-utestusing, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakin-or-utestusing, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakin-or-utestusing, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakin-or-utestusing, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakin-or-utestusing, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakin-or-utestusing
  mexpr-pushed-breakthen:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakthen, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakthen, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakthen, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakthen, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakthen, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakthen, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakthen, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakthen, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakthen, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakthen, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakthen, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakthen
  mexpr-pushed-breakelse:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakelse, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakelse, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakelse, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakelse, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakelse, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakelse, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakelse, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakelse, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakelse, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakelse, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakelse, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakelse
  mexpr-pushed-breakwith:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakwith, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakwith, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakwith, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakwith, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakwith, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakwith, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakwith, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakwith, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakwith, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakwith, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakwith, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakwith
  mexpr-pushed-breakswitchcase:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakswitchcase, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakswitchcase, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakswitchcase, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakswitchcase, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakswitchcase, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakswitchcase, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakswitchcase, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakswitchcase, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakswitchcase, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakswitchcase, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakswitchcase, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-pushed-breakswitchcase

  ###                                              ###
  ### MExpr That Does Not Start With An Identifier ###
  ###                                              ###
  mexpr-noident-pushed-breakrecordwith:
    - match: '\b(con)\b'
      scope: keyword.other.con.mcore
      set: [mexpr-pushed-breakrecordwith, optidenttype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(if)\b'
      scope: keyword.other.if.mcore
      set: [mexpr-pushed-breakrecordwith, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
    - match: '\b(lam)\b'
      scope: keyword.other.lam.mcore
      set: [mexpr-pushed-breakrecordwith, optidentifier-pushed-breakdot]
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecordwith, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-funcdef-pushed]
    - match: '\b(match)\b'
      scope: keyword.other.match.mcore
      set: [mexpr-pushed-breakrecordwith, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
    - match: '\b(switch)\b'
      scope: keyword.other.switch.mcore
      set: [mexpr-pushed-breakcond-breakrecordwith, mexpr-pushed-breakswitchcase]
    - match: '\b(recursive)\b'
      scope: keyword.other.recursive.mcore
      set: [mexpr-pushed-breakrecordwith, recursive-body-pushed]
    - match: '\b(type)\b'
      scope: keyword.other.type.mcore
      set: [mexpr-pushed-breakrecordwith, opttypetype-pushed-breakin, identifier-typedef-pushed]
    - match: '\b(use)\b'
      scope: keyword.other.use.mcore
      set: [mexpr-pushed-breakrecordwith, directive-in-pushed, identifier-pushed]
    - match: '\b(utest)\b'
      scope: keyword.other.utest.mcore
      set: [mexpr-pushed-breakrecordwith, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
    - match: '\b(external)\b'
      scope: keyword.other.external.mcore
      set: [mexpr-pushed-breakrecordwith, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]
    - include: atoms-noident-pushed-breakrecordwith

  ###                                  ###
  ### MExpr Immediate Break Conditions ###
  ###    (i.e. no mexpr in between)    ###
  ###                                  ###
  mexpr-pushed-breakcond-breaktoplevel:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktoplevel]
    - include: top-level-pushed
  mexpr-pushed-breakcond-breaktoplevel-or-utestusing:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing]
    - include: top-level-pushed
    - match: '\b(using)\b'
      scope: keyword.other.using.mcore
      set: [mexpr-pushed-breaktoplevel]
  mexpr-pushed-breakcond-breakrecbody:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecbody]
    - include: recursive-body-pushed
  mexpr-pushed-breakcond-breaktoprecbody:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktoprecbody]
    - include: top-recursive-body-pushed
  mexpr-pushed-breakcond-breaktuple:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktuple]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set:
        - meta_include_prototype: false
        - include: prototype-ignore-rparen
        - match: '\)'
          scope: symbol.rparen.mcore
          pop: true
        - include: mexpr-pushed-breaktuple
  mexpr-pushed-breakcond-breakseq:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakseq]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breakseq]
  mexpr-pushed-breakcond-breakrecordcontinued:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecordcontinued]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breakrecordcontinued, eqoperator-pushed, identifier-pushed]
  mexpr-pushed-breakcond-breakrecordwith:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecordwith]
    - match: '\b(with)\b'
      scope: keyword.other.with.mcore
      set: [mexpr-pushed-breakrecordend, eqoperator-pushed, identifier-pushed]
  mexpr-pushed-breakcond-breakrecordend:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecordend]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
  mexpr-pushed-breakcond-breaksembody:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaksembody]
    - include: top-lang-sem-body-pushed
  mexpr-pushed-breakcond-breakin:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakin]
    - include: directive-in-pushed
  mexpr-pushed-breakcond-breakin-or-utestusing:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakin-or-utestusing]
    - include: top-level-pushed
    - match: '\b(using)\b'
      scope: keyword.other.using.mcore
      set: [mexpr-pushed-breaktoplevel]
    - include: directive-in-pushed
    - match: '\b(using)\b'
      scope: keyword.other.using.mcore
      set: [mexpr-pushed-breakin]
  mexpr-pushed-breakcond-breakthen:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakthen]
    - include: directive-then-pushed
  mexpr-pushed-breakcond-breakelse:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakelse]
    - include: directive-else-pushed
  mexpr-pushed-breakcond-breakwith:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakwith]
    - include: directive-with-pushed
  mexpr-pushed-breakcond-breakswitchcase:
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakswitchcase]
    - match: '\b(case)\b'
      scope: keyword.other.case.mcore
      set: [mexpr-pushed-breakswitchcase, pattern-pushed-breakthen]
    - match: '\b(end)\b'
      scope: keyword.other.end.mcore
      pop: true

  ###             ###
  ### MExpr Atoms ###
  ###             ###
  atoms-pushed-breaktoplevel:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktoplevel, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktoplevel, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktoplevel, record-entry-pushed]
  atoms-pushed-optional-breaktoplevel:
    - include: top-level-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktoplevel, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktoplevel, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktoplevel, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breaktoplevel, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktoplevel]
  atoms-pushed-breaktoplevel-or-utestusing:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, record-entry-pushed]
  atoms-pushed-optional-breaktoplevel-or-utestusing:
    - include: top-level-pushed
    - match: '\b(using)\b'
      scope: keyword.other.using.mcore
      set: [mexpr-pushed-breaktoplevel]
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breaktoplevel-or-utestusing, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktoplevel-or-utestusing]
  atoms-pushed-breakrecbody:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecbody, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecbody, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecbody, record-entry-pushed]
  atoms-pushed-optional-breakrecbody:
    - include: recursive-body-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecbody]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecbody, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecbody, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecbody, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakrecbody, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecbody]
  atoms-pushed-breaktoprecbody:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoprecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoprecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktoprecbody, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktoprecbody, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktoprecbody, record-entry-pushed]
  atoms-pushed-optional-breaktoprecbody:
    - include: top-recursive-body-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoprecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktoprecbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktoprecbody]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktoprecbody, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktoprecbody, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktoprecbody, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breaktoprecbody, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktoprecbody]
  atoms-pushed-breaktuple:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktuple, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktuple, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktuple, record-entry-pushed]
  atoms-pushed-optional-breaktuple:
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set:
        - meta_include_prototype: false
        - include: prototype-ignore-rparen
        - match: '\)'
          scope: symbol.rparen.mcore
          pop: true
        - include: mexpr-pushed-breaktuple
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaktuple]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaktuple, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaktuple, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaktuple, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breaktuple, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaktuple]
  atoms-pushed-breakseq:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakseq, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakseq, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakseq, record-entry-pushed]
  atoms-pushed-optional-breakseq:
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breakseq]
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakseq, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakseq, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakseq, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakseq, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakseq]
  atoms-pushed-breakrecordcontinued:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordcontinued]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordcontinued]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, record-entry-pushed]
  atoms-pushed-optional-breakrecordcontinued:
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breakrecordcontinued, eqoperator-pushed, identifier-pushed]
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordcontinued]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordcontinued]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordcontinued]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakrecordcontinued, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecordcontinued]
  atoms-pushed-breakrecordwith:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordwith, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordwith, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordwith, record-entry-pushed]
  atoms-pushed-optional-breakrecordwith:
    - match: '\b(with)\b'
      scope: keyword.other.with.mcore
      set: [mexpr-pushed-breakrecordend, eqoperator-pushed, identifier-pushed]
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordwith, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordwith, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordwith, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakrecordwith, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecordwith]
  atoms-pushed-breakrecordend:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordend]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordend]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordend, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordend, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordend, record-entry-pushed]
  atoms-pushed-optional-breakrecordend:
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordend]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordend]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordend]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordend, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordend, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordend, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakrecordend, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakrecordend]
  atoms-pushed-breaksembody:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaksembody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaksembody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaksembody, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaksembody, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaksembody, record-entry-pushed]
  atoms-pushed-optional-breaksembody:
    - include: top-lang-sem-body-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaksembody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breaksembody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breaksembody]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breaksembody, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breaksembody, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breaksembody, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breaksembody, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breaksembody]
  atoms-pushed-breakin:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakin, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakin, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakin, record-entry-pushed]
  atoms-pushed-optional-breakin:
    - include: directive-in-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakin, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakin, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakin, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakin, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakin]
  atoms-pushed-breakin-or-utestusing:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, record-entry-pushed]
  atoms-pushed-optional-breakin-or-utestusing:
    - include: directive-in-pushed
    - match: '\b(using)\b'
      scope: keyword.other.using.mcore
      set: [mexpr-pushed-breakin]
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakin-or-utestusing]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakin-or-utestusing, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakin-or-utestusing]
  atoms-pushed-breakthen:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakthen, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakthen, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakthen, record-entry-pushed]
  atoms-pushed-optional-breakthen:
    - include: directive-then-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakthen]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakthen, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakthen, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakthen, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakthen, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakthen]
  atoms-pushed-breakelse:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakelse]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakelse]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakelse, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakelse, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakelse, record-entry-pushed]
  atoms-pushed-optional-breakelse:
    - include: directive-else-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakelse]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakelse]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakelse]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakelse, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakelse, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakelse, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakelse, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakelse]
  atoms-pushed-breakwith:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakwith, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakwith, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakwith, record-entry-pushed]
  atoms-pushed-optional-breakwith:
    - include: directive-with-pushed
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakwith]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakwith, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakwith, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakwith, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakwith, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakwith]
  atoms-pushed-breakswitchcase:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakswitchcase]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakswitchcase]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakswitchcase, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakswitchcase, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakswitchcase, record-entry-pushed]
  atoms-pushed-optional-breakswitchcase:
    - match: '\b(case)\b'
      scope: keyword.other.case.mcore
      set: [mexpr-pushed-breakswitchcase, pattern-pushed-breakthen]
    - match: '\b(end)\b'
      scope: keyword.other.end.mcore
      pop: true
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakswitchcase]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakswitchcase]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakswitchcase]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakswitchcase, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakswitchcase, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakswitchcase, record-entry-pushed]
    - match: '[.]'
      scope: symbol.dot.mcore
      set: [atoms-pushed-optional-breakswitchcase, record-proj-label-pushed]
    - match: '(;)'
      scope: symbol.semicolon.mcore
      set: [mexpr-pushed-breakswitchcase]

  ###                                                    ###
  ### MExpr Atoms That Does Not Start With An Identifier ###
  ###                                                    ###
  atoms-noident-pushed-breakrecordwith:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\b(never)\b'
      scope: keyword.other.never.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [atoms-pushed-optional-breakrecordwith]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [atoms-pushed-optional-breakrecordwith]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [atoms-pushed-optional-breakrecordwith, mexpr-pushed-breaktuple]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [atoms-pushed-optional-breakrecordwith, mexpr-pushed-breakseq]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [atoms-pushed-optional-breakrecordwith, record-entry-pushed]

  ###                  ###
  ### Type Expressions ###
  ###                  ###
  ### Note: The include at the end of each typeexpr case is to account for type application (e.g. Option a)
  typeexpr-pushed-breakrparen:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breakrparen, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breakrparen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrparen, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breakrparen:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakrparen]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - include: typeexpr-pushed-breakrparen
  typeexpr-pushed-breakeq:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breakeq, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breakeq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breakeq, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breakeq:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakeq]
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
    - include: typeexpr-pushed-breakeq
  typeexpr-pushed-breakin:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breakin, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breakin]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breakin, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breakin:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakin]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
    - include: typeexpr-pushed-breakin
  typeexpr-pushed-breakdot:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breakdot, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breakdot]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breakdot, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breakdot:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakdot]
    - match: '[.]'
      scope: keyword.other.lamdot.mcore
      pop: true
    - include: typeexpr-pushed-breakdot
  typeexpr-pushed-breakrsquare:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breakrsquare, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breakrsquare]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breakrsquare, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breakrsquare:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakrsquare]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
    - include: typeexpr-pushed-breakrsquare
  typeexpr-pushed-breaktuple:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breaktuple, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrowcomma-or-breakrparen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrparen, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrowcomma-or-breakrparen:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaktuple]
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [typeexpr-pushed-breaktuple]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - include: typeexpr-pushed-breaktuple
  typeexpr-pushed-breakrecord:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breakrecord, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrowcomma-or-breakrcurly, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrowcomma-or-breakrcurly:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakrecord]
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - include: typeexpr-pushed-breakrecord
  typeexpr-pushed-breaksynbody:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breaksynbody, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breaksynbody]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breaksynbody, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breaksynbody:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaksynbody]
    - include: top-lang-syn-body-pushed
    - include: typeexpr-pushed-breaksynbody
  typeexpr-pushed-breaktoplevel:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breaktoplevel, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breaktoplevel]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breaktoplevel, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breaktoplevel:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaktoplevel]
    - include: top-level-pushed
    - include: typeexpr-pushed-breaktoplevel
  typeexpr-pushed-breaklang-end-or-more:
    - match: '\b(all)\b'
      scope: keyword.other.all.mcore
      set: [typeexpr-pushed-breaklang-end-or-more, dot-pushed, identifier-pushed]
    - match: '\b(Tensor)\b'
      scope: keyword.directive.tensortype.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more, typeexpr-pushed-breakrsquare, lsquare-pushed]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{type_ident}})|({{ident}}|({{conident}})))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: keyword.directive.typename.mcore
        5: other.ident.mcore
        6: support.type.conident.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more, typeexpr-pushed-breakrsquare]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more, typeexpr-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [typeexpr-pushed-continuearrow-or-breaklang-end-or-more, typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
  typeexpr-pushed-continuearrow-or-breaklang-end-or-more:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaklang-end-or-more]
    - include: top-lang-end-or-more-pushed
    - include: typeexpr-pushed-breaklang-end-or-more

  optidentifier-pushed-breakdot:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [optidenttype-pushed-breakdot]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [optidenttype-pushed-breakdot]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '[.]'
      scope: keyword.other.lamdot.mcore
      pop: true

  optidenttype-pushed-breakeq:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breakeq]
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
  optidenttype-pushed-breakin:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breakin]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  optidenttype-pushed-breakdot:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breakdot]
    - match: '[.]'
      scope: keyword.other.lamdot.mcore
      pop: true
  optidenttype-pushed-breaktoplevel:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breaktoplevel]
    - include: top-level-pushed

  opttypetype-pushed-breakin:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [typeexpr-pushed-breakin]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  opttypetype-pushed-breaktoplevel:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [typeexpr-pushed-breaktoplevel]
    - include: top-level-pushed

  ###                     ###
  ### Pattern Expressions ###
  ###                     ###
  pattern-pushed-breakrightarrow:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakrightarrow]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakrightarrow]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakrightarrow]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakrightarrow]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakrightarrow, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakrightarrow-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakrightarrow-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakrightarrow]
  pattern-pushed-concatseq-or-breakrightarrow:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrightarrow-cond, patternseq-pushed]
    - include: pattern-pushed-breakrightarrow-cond
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakrightarrow]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakrightarrow]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakrightarrow]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakrightarrow]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakrightarrow-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakrightarrow, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakrightarrow-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakrightarrow-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakrightarrow]
  pattern-pushed-concatident-or-breakrightarrow:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakrightarrow-cond, identifier-pushed]
    - include: pattern-pushed-breakrightarrow-cond
  pattern-pushed-pushseq-or-breakrightarrow-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrightarrow-cond, patternseq-pushed]
    - include: pattern-pushed-breakrightarrow-cond
  pattern-pushed-breakrightarrow-cond:
    - include: rightarrow-pushed
    - match: '(\|)'
      scope: keyword.operator.or.mcore
      set: [pattern-pushed-breakrightarrow]
    - match: '(\&)'
      scope: keyword.operator.and.mcore
      set: [pattern-pushed-breakrightarrow]
  pattern-pushed-breakthen:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakthen]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakthen]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakthen, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakthen-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakthen-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakthen]
  pattern-pushed-concatseq-or-breakthen:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakthen-cond, patternseq-pushed]
    - include: pattern-pushed-breakthen-cond
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakthen]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakthen]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakthen]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakthen-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakthen, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakthen-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakthen-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakthen]
  pattern-pushed-concatident-or-breakthen:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakthen-cond, identifier-pushed]
    - include: pattern-pushed-breakthen-cond
  pattern-pushed-pushseq-or-breakthen-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakthen-cond, patternseq-pushed]
    - include: pattern-pushed-breakthen-cond
  pattern-pushed-breakthen-cond:
    - include: directive-then-pushed
    - match: '(\|)'
      scope: keyword.operator.or.mcore
      set: [pattern-pushed-breakthen]
    - match: '(\&)'
      scope: keyword.operator.and.mcore
      set: [pattern-pushed-breakthen]
  pattern-pushed-breakwhich-then-or-in:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakwhich-then-or-in]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakwhich-then-or-in]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakwhich-then-or-in]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakwhich-then-or-in]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakwhich-then-or-in, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakwhich-then-or-in]
  pattern-pushed-concatseq-or-breakwhich-then-or-in:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond, patternseq-pushed]
    - include: pattern-pushed-breakwhich-then-or-in-cond
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakwhich-then-or-in]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakwhich-then-or-in]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakwhich-then-or-in]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakwhich-then-or-in]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakwhich-then-or-in, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakwhich-then-or-in]
  pattern-pushed-concatident-or-breakwhich-then-or-in:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakwhich-then-or-in-cond, identifier-pushed]
    - include: pattern-pushed-breakwhich-then-or-in-cond
  pattern-pushed-pushseq-or-breakwhich-then-or-in-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakwhich-then-or-in-cond, patternseq-pushed]
    - include: pattern-pushed-breakwhich-then-or-in-cond
  pattern-pushed-breakwhich-then-or-in-cond:
    - include: directive-in-pushed
    - match: '\b(then)\b'
      scope: keyword.other.then.mcore
      set: [mexpr-pushed-breakelse]
    - match: '(\|)'
      scope: keyword.operator.or.mcore
      set: [pattern-pushed-breakwhich-then-or-in]
    - match: '(\&)'
      scope: keyword.operator.and.mcore
      set: [pattern-pushed-breakwhich-then-or-in]
  pattern-pushed-breakseq:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakseq]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakseq]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakseq, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakseq-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakseq-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakseq]
  pattern-pushed-concatseq-or-breakseq:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakseq-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - include: pattern-pushed-breakseq-cond
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakseq]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakseq]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakseq]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakseq-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakseq, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakseq-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakseq-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakseq]
  pattern-pushed-concatident-or-breakseq:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakseq-cond, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - include: pattern-pushed-breakseq-cond
  pattern-pushed-pushseq-or-breakseq-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakseq-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - include: pattern-pushed-breakseq-cond
  pattern-pushed-breakseq-cond:
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [pattern-pushed-breakseq]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
    - match: '(\|)'
      scope: keyword.operator.or.mcore
      set: [pattern-pushed-breakseq]
    - match: '(\&)'
      scope: keyword.operator.and.mcore
      set: [pattern-pushed-breakseq]
  pattern-pushed-breaktuple:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breaktuple]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breaktuple]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breaktuple, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breaktuple-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breaktuple-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breaktuple]
  pattern-pushed-concatseq-or-breaktuple:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breaktuple-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - include: pattern-pushed-breaktuple-cond
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breaktuple]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breaktuple]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breaktuple]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breaktuple-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breaktuple, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breaktuple-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breaktuple-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breaktuple]
  pattern-pushed-concatident-or-breaktuple:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breaktuple-cond, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - include: pattern-pushed-breaktuple-cond
  pattern-pushed-pushseq-or-breaktuple-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breaktuple-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - include: pattern-pushed-breaktuple-cond
  pattern-pushed-breaktuple-cond:
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set:
        - meta_include_prototype: false
        - include: prototype-ignore-rparen
        - match: '\)'
          scope: symbol.rparen.mcore
          pop: true
        - include: pattern-pushed-breaktuple
    - match: '(\|)'
      scope: keyword.operator.or.mcore
      set: [pattern-pushed-breaktuple]
    - match: '(\&)'
      scope: keyword.operator.and.mcore
      set: [pattern-pushed-breaktuple]
  pattern-pushed-breakrecord:
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakrecord]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakrecord]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakrecord]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakrecord]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakrecord, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakrecord-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakrecord-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakrecord]
  pattern-pushed-concatseq-or-breakrecord:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrecord-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - include: pattern-pushed-breakrecord-cond
    - match: '[(]\s*[)]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '[{]\s*[}]'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '\[\s*\]'
      scope: constant.language.mcore
      set: [pattern-pushed-concatident-or-breakrecord]
    - match: '\b(true|false)\b'
      scope: constant.language.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '(-)?[0-9]+([.][0-9]*)?(e|E)(\+|-)?[0-9]+'
      scope: constant.numeric.float.stdform.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '(-)?[0-9]+[.]([0-9])*'
      scope: constant.numeric.float.normal.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '(-)?[0-9]+'
      scope: constant.numeric.integer.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [pattern-pushed-concatseq-or-breakrecord]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatseq-or-breakrecord]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [pattern-pushed-concatident-or-breakrecord]
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '('')({{escapechar}})('')'
      captures:
        1: string.quote.single.mcore
        2: constant.character.escape.mcore
        3: string.quote.single.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '('')([^''\\])('')'
      scope: string.quote.single.mcore
      set: [pattern-pushed-breakrecord-cond]
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-concatident-or-breakrecord, pattern-pushed-breakseq]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [pattern-pushed-breakrecord-cond, pattern-pushed-breaktuple]
    - match: '\{'
      scope: symbol.lcurly.mcore
      set: [pattern-pushed-breakrecord-cond, pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - match: '[!]'
      scope: keyword.operator.not.mcore
      set: [pattern-pushed-breakrecord]
  pattern-pushed-concatident-or-breakrecord:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakrecord-cond, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - include: pattern-pushed-breakrecord-cond
  pattern-pushed-pushseq-or-breakrecord-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrecord-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - include: pattern-pushed-breakrecord-cond
  pattern-pushed-breakrecord-cond:
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - match: '(\|)'
      scope: keyword.operator.or.mcore
      set: [pattern-pushed-breakrecord]
    - match: '(\&)'
      scope: keyword.operator.and.mcore
      set: [pattern-pushed-breakrecord]

  patternseq-pushed:
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '\[\s*\]'
      scope: constant.language.mcore
      pop: true
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-breakseq]

  ###                           ###
  ### Recursive Expression Body ###
  ###      (Not Top-Level)      ###
  ###                           ###
  recursive-body-pushed:
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecbody, optidenttype-pushed-breakeq, identifier-pushed]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true

  ###             ###
  ### Record Body ###
  ###             ###
  record-entry-pushed:
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - include: mexpr-noident-pushed-breakrecordwith
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      set: [record-eqorwith-pushed]
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [record-eqorwith-pushed]
        - include: stringsymbol
        - meta_include_prototype: false

  record-eqorwith-pushed:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [mexpr-pushed-breakrecordcontinued]
    - include: atoms-pushed-optional-breakrecordwith

  record-proj-label-pushed:
    - include: identifier-pushed
    - include: uinteger-pushed

  ###                ###
  ### String Symbols ###
  ###                ###
  string-pushed:
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
  stringsymbol:
    - match: '{{escapechar}}'
      scope: constant.character.escape.mcore
    - match: '[^"\\]'
      scope: string.character.mcore

  ###                   ###
  ### Identifier Tokens ###
  ###                   ###
  identifier-pushed:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: support.type.conident.mcore
      pop: true
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
  identifier-funcdef-pushed:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: entity.name.function.mcore
        5: support.type.conident.mcore
      pop: true
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
  identifier-typedef-pushed:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: entity.name.type.mcore
      pop: true
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
  identifier-classdef-pushed:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}})|({{conident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
        5: entity.name.class.mcore
      pop: true
    - match: '(#(?:var|con|type|label|frozen))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false

  ###                ###
  ### Integer Tokens ###
  ###                ###
  uinteger-pushed:
  - match: '[0-9]+'
    scope: constant.numeric.integer.mcore
    pop: true

  ###                          ###
  ### Pushed Singleton Symbols ###
  ###                          ###
  eqoperator-pushed:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
  colon-pushed:
    - match: '(:)'
      scope: symbol.colon.mcore
      pop: true
  dot-pushed:
    - match: '(.)'
      scope: symbol.dot.mcore
      pop: true
  lsquare-pushed:
    - match: '\['
      scope: symbol.lsquare.mcore
      pop: true
  rparen-pushed:
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
  rightarrow-pushed:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      pop: true
  optbang-colon-pushed:
    - match: '(!)'
      scope: symbol.bang.mcore
      set: [colon-pushed]
    - include: colon-pushed
  directive-in-pushed:
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  directive-then-pushed:
    - match: '\b(then)\b'
      scope: keyword.other.then.mcore
      pop: true
  directive-else-pushed:
    - match: '\b(else)\b'
      scope: keyword.other.else.mcore
      pop: true
  directive-with-pushed:
    - match: '\b(with)\b'
      scope: keyword.other.with.mcore
      pop: true
