%YAML 1.2
#%%ARGS=(ThisName,BreakName)
- match: '\b(con)\b'
  scope: keyword.other.con.mcore
  set: [%%%USEARG=ThisName, optidenttype-pushed-breakin, identifier-condef-pushed]
- match: '\b(if)\b'
  scope: keyword.other.if.mcore
  set: [%%%USEARG=ThisName, mexpr-pushed-breakelse, mexpr-pushed-breakthen]
- match: '\b(lam)\b'
  scope: keyword.other.lam.mcore
  set: [%%%USEARG=ThisName, optidentifier-pushed-breakdot]
- match: '\b(let)\b'
  scope: keyword.other.let.mcore
  set: [%%%USEARG=ThisName, mexpr-pushed-breakin, optidenttype-pushed-breakeq, identifier-letdef-pushed]
- match: '\b(match)\b'
  scope: keyword.other.match.mcore
  set: [%%%USEARG=ThisName, pattern-pushed-breakwhich-then-or-in, mexpr-pushed-breakwith]
- match: '\b(switch)\b'
  scope: keyword.other.switch.mcore
  set: [%%%USEARG=BreakName, mexpr-pushed-breakswitchcase]
- match: '\b(recursive)\b'
  scope: keyword.other.recursive.mcore
  set: [%%%USEARG=ThisName, recursive-body-pushed]
- match: '\b(type)\b'
  scope: keyword.other.type.mcore
  set: [%%%USEARG=ThisName, opttypetype-pushed-breakin, identifier-pushed]
- match: '\b(use)\b'
  scope: keyword.other.use.mcore
  set: [%%%USEARG=ThisName, directive-in-pushed, identifier-pushed]
- match: '\b(utest)\b'
  scope: keyword.other.utest.mcore
  set: [%%%USEARG=ThisName, mexpr-pushed-breakin-or-utestusing, mexpr-pushed-breakwith]
- match: '\b(external)\b'
  scope: keyword.other.external.mcore
  set: [%%%USEARG=ThisName, typeexpr-pushed-breakin, optbang-colon-pushed, identifier-pushed]