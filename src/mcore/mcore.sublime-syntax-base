%YAML 1.2
---
name: MCore
file_extensions:
  - mc
scope: source.mcore

variables:
  builtin_ident: '(?:unit|not|and|or|addi|subi|muli|divi|modi|negi|lti|leqi|gti|geqi|eqi|neqi|slli|srli|srai|arity|addf|subf|mulf|divf|negf|ltf|leqf|gtf|geqf|eqf|neqf|char2int|int2char|int2float|string2float|length|concat|nth|cons|snoc|slice|reverse|print|dprint|argv|readFile|writeFile|fileExists|deleteFile|error|floorfi|ceilfi|roundfi|get|set|splitAt|makeSeq)'
  reserved_ident: '(?:if|then|else|match|with|let|recursive|utest|lam|lang|syn|sem|con|type|use|in|end|mexpr)'
  type_ident: '(?:Dyn|Bool|Int|Float|Char|String)'
  ident: '(?:[a-zA-Z_][a-zA-Z_0-9]*)'
  escapechar: '(?:\\(?:[?abfnrtv"\\]|''))'

# Context parsing
contexts:
  prototype:
    - include: comment
    - include: illegal-open-rparen
    - include: illegal-open-rsquare
    - include: illegal-open-rcurly

  prototype-ignore-rparen:
    - include: comment
    - include: illegal-open-rsquare
    - include: illegal-open-rcurly

  prototype-ignore-rsquare:
    - include: comment
    - include: illegal-open-rparen
    - include: illegal-open-rcurly

  prototype-ignore-rcurly:
    - include: comment
    - include: illegal-open-rparen
    - include: illegal-open-rsquare

  main:
    - include: top-level

  top-level:
    - include: top-include
    - include: top-lang
    - include: top-let
    - include: top-recursive
    - include: top-con
    - include: top-type
    - include: top-utest
    - include: top-mexpr

  top-level-pushed:
    - include: top-include-pushed
    - include: top-lang-pushed
    - include: top-let-pushed
    - include: top-recursive-pushed
    - include: top-con-pushed
    - include: top-type-pushed
    - include: top-utest-pushed
    - include: top-mexpr-pushed

  ###          ###
  ### Comments ###
  ###          ###
  comment:
    - match: '(--|//)'
      scope: comment.line.mcore
      push:
        - match: '\n'
          scope: comment.line.mcore
          pop: true
        - include: comment-line-content
  comment-line-content:
    - match: '.*'
      scope: comment.line.mcore

  ###                                             ###
  ### Illegal RParen/RSquareBracket/RCurlyBracket ###
  ###                                             ###
  illegal-open-rparen:
    - match: '\)'
      scope: invalid.illegal.rparen.mcore
  illegal-open-rsquare:
    - match: '\]'
      scope: invalid.illegal.rsquare.mcore
  illegal-open-rcurly:
    - match: '\}'
      scope: invalid.illegal.rcurly.mcore

  ###                               ###
  ### Top-Level Include Expressions ###
  ###                               ###
  top-include:
    - match: '\b(include)\b'
      scope: keyword.directive.include.mcore
      push: [string-pushed]

  top-include-pushed:
    - match: '\b(include)\b'
      scope: keyword.directive.include.mcore
      set: [string-pushed]

  ###                            ###
  ### Top-Level Lang Expressions ###
  ###                            ###
  top-lang:
    - match: '\b(lang)\b'
      scope: keyword.directive.lang.mcore
      push: [top-lang-entry-pushed, identifier-pushed]

  top-lang-pushed:
    - match: '\b(lang)\b'
      scope: keyword.directive.lang.mcore
      set: [top-lang-entry-pushed, identifier-pushed]

  top-lang-entry-pushed:
      # Check what comes after 'lang'
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [top-lang-eqexpr-pushed, identifier-pushed]
    - include: top-lang-syn-entry-pushed
    - include: top-lang-sem-entry-pushed
    - include: top-lang-end-pushed
    - include: top-level-pushed

  top-lang-eqexpr-pushed:
      # lang X = ...
    - match: '(\+)'
      scope: keyword.operator.combine.mcore
      set: [top-lang-eqexpr-pushed, identifier-pushed]
    - include: top-lang-syn-entry-pushed
    - include: top-lang-sem-entry-pushed
    - include: top-lang-end-pushed
    - include: top-level-pushed

  top-lang-end-pushed:
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true

  top-lang-syn-entry-pushed:
    - match: '\b(syn)\b'
      scope: keyword.other.syn.mcore
      set: [top-lang-syn-body-pushed, eqoperator-pushed, identifier-pushed]

  top-lang-syn-body-pushed:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [typeexpr-pushed-breaksynbody, identifier-pushed]
    - include: top-lang-syn-entry-pushed
    - include: top-lang-sem-entry-pushed
    - include: top-lang-end-pushed

  top-lang-sem-entry-pushed:
    - match: '\b(sem)\b'
      scope: keyword.other.sem.mcore
      set: [top-lang-sem-preamble-pushed, identifier-pushed]

  top-lang-sem-preamble-pushed:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [top-lang-sem-body-pushed]
    - match: '\('
      scope: symbol.lparen.mcore
      set: [top-lang-sem-preamble-pushed, typeexpr-pushed-breakrparen, colon-pushed, identifier-pushed]

  top-lang-sem-body-pushed:
    - match: '(\|)'
      scope: keyword.operator.case.mcore
      set: [mexpr-pushed-breaksembody, pattern-pushed-breakrightarrow]
    - include: top-lang-syn-entry-pushed
    - include: top-lang-sem-entry-pushed
    - include: top-lang-end-pushed

  ###                           ###
  ### Top-Level Let Expressions ###
  ###                           ###
  top-let:
    - match: '\b(let)\b'
      scope: keyword.directive.let.mcore
      push: [mexpr-pushed-breaktoplevel, optidenttype-pushed-breakeq, identifier-pushed]

  top-let-pushed:
    - match: '\b(let)\b'
      scope: keyword.directive.let.mcore
      set: [mexpr-pushed-breaktoplevel, optidenttype-pushed-breakeq, identifier-pushed]

  ###                                 ###
  ### Top-Level Recursive Expressions ###
  ###                                 ###
  top-recursive:
    - match: '\b(recursive)\b'
      scope: keyword.directive.recursive.mcore
      push: [top-recursive-body-pushed]

  top-recursive-pushed:
    - match: '\b(recursive)\b'
      scope: keyword.directive.recursive.mcore
      set: [top-recursive-body-pushed]

  top-recursive-body-pushed:
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breaktoprecbody, optidenttype-pushed-breakeq, identifier-pushed]
    - match: '\b(end)\b'
      scope: keyword.directive.end.mcore
      pop: true

  ###                           ###
  ### Top-Level Con Expressions ###
  ###                           ###
  top-con:
    - match: '\b(con)\b'
      scope: keyword.directive.con.mcore
      push: [optidenttype-pushed-breaktoplevel, identifier-pushed]

  top-con-pushed:
    - match: '\b(con)\b'
      scope: keyword.directive.con.mcore
      set: [optidenttype-pushed-breaktoplevel, identifier-pushed]

  ###                            ###
  ### Top-Level Type Expressions ###
  ###                            ###
  top-type:
    - match: '\b(type)\b'
      scope: keyword.directive.type.mcore
      push: [opttypetype-pushed-breaktoplevel, identifier-pushed]

  top-type-pushed:
    - match: '\b(type)\b'
      scope: keyword.directive.type.mcore
      set: [opttypetype-pushed-breaktoplevel, identifier-pushed]

  ###                             ###
  ### Top-Level UTest Expressions ###
  ###                             ###
  top-utest:
    - match: '\b(utest)\b'
      scope: keyword.directive.utest.mcore
      push: [mexpr-pushed-breaktoplevel, mexpr-pushed-breakwith]

  top-utest-pushed:
    - match: '\b(utest)\b'
      scope: keyword.directive.utest.mcore
      set: [mexpr-pushed-breaktoplevel, mexpr-pushed-breakwith]

  ###                             ###
  ### Top-Level MExpr Expressions ###
  ###                             ###
  top-mexpr:
    - match: '\b(mexpr)\b'
      scope: keyword.directive.mexpr.mcore
      push: [mexpr-pushed-breaktoplevel]

  top-mexpr-pushed:
    - match: '\b(mexpr)\b'
      scope: keyword.directive.mexpr.mcore
      set: [mexpr-pushed-breaktoplevel]

  ###                   ###
  ### MExpr Expressions ###
  ###                   ###
  mexpr-pushed-breaktoplevel:
    #%%IMPORT=mexpr("mexpr-pushed-breaktoplevel")
    - include: atoms-pushed-mandatory-breaktoplevel
  mexpr-pushed-breakrecbody:
    #%%IMPORT=mexpr("mexpr-pushed-breakrecbody")
    - include: atoms-pushed-mandatory-breakrecbody
  mexpr-pushed-breaktoprecbody:
    #%%IMPORT=mexpr("mexpr-pushed-breaktoprecbody")
    - include: atoms-pushed-mandatory-breaktoprecbody
  mexpr-pushed-breaktuple:
    #%%IMPORT=mexpr("mexpr-pushed-breaktuple")
    - include: atoms-pushed-mandatory-breaktuple
  mexpr-pushed-breakseq:
    #%%IMPORT=mexpr("mexpr-pushed-breakseq")
    - include: atoms-pushed-mandatory-breakseq
  mexpr-pushed-breakrecordcontinued:
    #%%IMPORT=mexpr("mexpr-pushed-breakrecordcontinued")
    - include: atoms-pushed-mandatory-breakrecordcontinued
  mexpr-pushed-breakrecordwith:
    #%%IMPORT=mexpr("mexpr-pushed-breakrecordwith")
    - include: atoms-pushed-mandatory-breakrecordwith
  mexpr-pushed-breakrecordend:
    #%%IMPORT=mexpr("mexpr-pushed-breakrecordend")
    - include: atoms-pushed-mandatory-breakrecordend
  mexpr-pushed-breaksembody:
    #%%IMPORT=mexpr("mexpr-pushed-breaksembody")
    - include: atoms-pushed-mandatory-breaksembody
  mexpr-pushed-breakin:
    #%%IMPORT=mexpr("mexpr-pushed-breakin")
    - include: atoms-pushed-mandatory-breakin
  mexpr-pushed-breakthen:
    #%%IMPORT=mexpr("mexpr-pushed-breakthen")
    - include: atoms-pushed-mandatory-breakthen
  mexpr-pushed-breakelse:
    #%%IMPORT=mexpr("mexpr-pushed-breakelse")
    - include: atoms-pushed-mandatory-breakelse
  mexpr-pushed-breakwith:
    #%%IMPORT=mexpr("mexpr-pushed-breakwith")
    - include: atoms-pushed-mandatory-breakwith

  ###             ###
  ### MExpr Atoms ###
  ###             ###
  atoms-pushed-mandatory-breaktoplevel:
    #%%IMPORT=atoms("atoms-pushed-breaktoplevel")
  atoms-pushed-breaktoplevel:
    - include: top-level-pushed
    #%%IMPORT=atoms("atoms-pushed-breaktoplevel")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breaktoplevel")
  atoms-pushed-mandatory-breakrecbody:
    #%%IMPORT=atoms("atoms-pushed-breakrecbody")
  atoms-pushed-breakrecbody:
    - include: recursive-body-pushed
    #%%IMPORT=atoms("atoms-pushed-breakrecbody")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakrecbody")
  atoms-pushed-mandatory-breaktoprecbody:
    #%%IMPORT=atoms("atoms-pushed-breaktoprecbody")
  atoms-pushed-breaktoprecbody:
    - include: top-recursive-body-pushed
    #%%IMPORT=atoms("atoms-pushed-breaktoprecbody")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breaktoprecbody")
  atoms-pushed-mandatory-breaktuple:
    #%%IMPORT=atoms("atoms-pushed-breaktuple")
  atoms-pushed-breaktuple:
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breaktuple]
    #%%IMPORT=atoms("atoms-pushed-breaktuple")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breaktuple")
  atoms-pushed-mandatory-breakseq:
    #%%IMPORT=atoms("atoms-pushed-breakseq")
  atoms-pushed-breakseq:
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breakseq]
    #%%IMPORT=atoms("atoms-pushed-breakseq")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakseq")
  atoms-pushed-mandatory-breakrecordcontinued:
    #%%IMPORT=atoms("atoms-pushed-breakrecordcontinued")
  atoms-pushed-breakrecordcontinued:
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [mexpr-pushed-breakrecordcontinued, eqoperator-pushed, identifier-pushed]
    #%%IMPORT=atoms("atoms-pushed-breakrecordcontinued")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakrecordcontinued")
  atoms-pushed-mandatory-breakrecordwith:
    #%%IMPORT=atoms("atoms-pushed-breakrecordwith")
  atoms-pushed-breakrecordwith:
    - match: '\b(with)\b'
      scope: keyword.other.with.mcore
      set: [mexpr-pushed-breakrecordend, eqoperator-pushed, identifier-pushed]
    #%%IMPORT=atoms("atoms-pushed-breakrecordwith")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakrecordwith")
  atoms-pushed-mandatory-breakrecordend:
    #%%IMPORT=atoms("atoms-pushed-breakrecordend")
  atoms-pushed-breakrecordend:
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    #%%IMPORT=atoms("atoms-pushed-breakrecordend")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakrecordend")
  atoms-pushed-mandatory-breaksembody:
    #%%IMPORT=atoms("atoms-pushed-breaksembody")
  atoms-pushed-breaksembody:
    - include: top-lang-sem-body-pushed
    #%%IMPORT=atoms("atoms-pushed-breaksembody")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breaksembody")
  atoms-pushed-mandatory-breakin:
    #%%IMPORT=atoms("atoms-pushed-breakin")
  atoms-pushed-breakin:
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
    #%%IMPORT=atoms("atoms-pushed-breakin")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakin")
  atoms-pushed-mandatory-breakthen:
    #%%IMPORT=atoms("atoms-pushed-breakthen")
  atoms-pushed-breakthen:
    - match: '\b(then)\b'
      scope: keyword.other.then.mcore
      pop: true
    #%%IMPORT=atoms("atoms-pushed-breakthen")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakthen")
  atoms-pushed-mandatory-breakelse:
    #%%IMPORT=atoms("atoms-pushed-breakelse")
  atoms-pushed-breakelse:
    - match: '\b(else)\b'
      scope: keyword.other.else.mcore
      pop: true
    #%%IMPORT=atoms("atoms-pushed-breakelse")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakelse")
  atoms-pushed-mandatory-breakwith:
    #%%IMPORT=atoms("atoms-pushed-breakwith")
  atoms-pushed-breakwith:
    - match: '\b(with)\b'
      scope: keyword.other.with.mcore
      pop: true
    #%%IMPORT=atoms("atoms-pushed-breakwith")
    #%%IMPORT=atoms-nonfst("atoms-pushed-breakwith")

  ###                  ###
  ### Type Expressions ###
  ###                  ###
  typeexpr-pushed-breakrparen:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breakrparen")
  typeexpr-pushed-continuearrow-or-breakrparen:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakrparen]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
  typeexpr-pushed-breakeq:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breakeq")
  typeexpr-pushed-continuearrow-or-breakeq:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakeq]
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
  typeexpr-pushed-breakin:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breakin")
  typeexpr-pushed-continuearrow-or-breakin:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakin]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  typeexpr-pushed-breakdot:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breakdot")
  typeexpr-pushed-continuearrow-or-breakdot:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakdot]
    - match: '[.]'
      scope: keyword.other.lamdot.mcore
      pop: true
  typeexpr-pushed-breakrsquare:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breakrsquare")
  typeexpr-pushed-continuearrow-or-breakrsquare:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakrsquare]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
  typeexpr-pushed-breaktuple:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrowcomma-or-breakrparen")
  typeexpr-pushed-continuearrowcomma-or-breakrparen:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaktuple]
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [typeexpr-pushed-breaktuple]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
  typeexpr-pushed-breakrecord:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrowcomma-or-breakrcurly")
  typeexpr-pushed-continuearrowcomma-or-breakrcurly:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breakrecord]
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [typeexpr-pushed-breakrecord, colon-pushed, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
  typeexpr-pushed-breaksynbody:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breaksynbody")
  typeexpr-pushed-continuearrow-or-breaksynbody:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaksynbody]
    - include: top-lang-syn-body-pushed
  typeexpr-pushed-breaktoplevel:
    #%%IMPORT=typeexpr("typeexpr-pushed-continuearrow-or-breaktoplevel")
  typeexpr-pushed-continuearrow-or-breaktoplevel:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      set: [typeexpr-pushed-breaktoplevel]
    - include: top-level-pushed

  optidenttype-pushed-breakeq:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breakeq]
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
  optidenttype-pushed-breakin:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breakin]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  optidenttype-pushed-breakdot:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breakdot]
    - match: '[.]'
      scope: keyword.other.lamdot.mcore
      pop: true
  optidenttype-pushed-breaktoplevel:
    - match: '(:)'
      scope: symbol.colon.mcore
      set: [typeexpr-pushed-breaktoplevel]
    - include: top-level-pushed

  opttypetype-pushed-breakin:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [typeexpr-pushed-breakin]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  opttypetype-pushed-breaktoplevel:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [typeexpr-pushed-breaktoplevel]
    - include: top-level-pushed

  ###                     ###
  ### Pattern Expressions ###
  ###                     ###
  pattern-pushed-breakrightarrow:
    #%%IMPORT=pattern("pattern-pushed-breakrightarrow-cond", "pattern-pushed-breakrightarrow", "pattern-pushed-concatseq-or-breakrightarrow", "pattern-pushed-concatident-or-breakrightarrow")
  pattern-pushed-concatseq-or-breakrightarrow:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrightarrow-cond, patternseq-pushed]
    - include: pattern-pushed-breakrightarrow-cond
    #%%IMPORT=pattern("pattern-pushed-breakrightarrow-cond", "pattern-pushed-breakrightarrow", "pattern-pushed-concatseq-or-breakrightarrow", "pattern-pushed-concatident-or-breakrightarrow")
  pattern-pushed-concatident-or-breakrightarrow:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakrightarrow-cond, identifier-pushed]
    - include: pattern-pushed-breakrightarrow-cond
  pattern-pushed-pushseq-or-breakrightarrow-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrightarrow-cond, patternseq-pushed]
    - include: pattern-pushed-breakrightarrow-cond
  pattern-pushed-breakrightarrow-cond:
    - include: rightarrow-pushed
    #%%IMPORT=pattern-continuation("pattern-pushed-breakrightarrow")
  pattern-pushed-breakthen:
    #%%IMPORT=pattern("pattern-pushed-breakthen-cond", "pattern-pushed-breakthen", "pattern-pushed-concatseq-or-breakthen", "pattern-pushed-concatident-or-breakthen")
  pattern-pushed-concatseq-or-breakthen:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakthen-cond, patternseq-pushed]
    - include: pattern-pushed-breakthen-cond
    #%%IMPORT=pattern("pattern-pushed-breakthen-cond", "pattern-pushed-breakthen", "pattern-pushed-concatseq-or-breakthen", "pattern-pushed-concatident-or-breakthen")
  pattern-pushed-concatident-or-breakthen:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakthen-cond, identifier-pushed]
    - include: pattern-pushed-breakthen-cond
  pattern-pushed-pushseq-or-breakthen-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakthen-cond, patternseq-pushed]
    - include: pattern-pushed-breakthen-cond
  pattern-pushed-breakthen-cond:
    - include: directive-then-pushed
    #%%IMPORT=pattern-continuation("pattern-pushed-breakthen")
  pattern-pushed-breakseq:
    #%%IMPORT=pattern("pattern-pushed-breakseq-cond", "pattern-pushed-breakseq", "pattern-pushed-concatseq-or-breakseq", "pattern-pushed-concatident-or-breakseq")
  pattern-pushed-concatseq-or-breakseq:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakseq-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - include: pattern-pushed-breakseq-cond
    #%%IMPORT=pattern("pattern-pushed-breakseq-cond", "pattern-pushed-breakseq", "pattern-pushed-concatseq-or-breakseq", "pattern-pushed-concatident-or-breakseq")
  pattern-pushed-concatident-or-breakseq:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakseq-cond, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - include: pattern-pushed-breakseq-cond
  pattern-pushed-pushseq-or-breakseq-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakseq-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - include: pattern-pushed-breakseq-cond
  pattern-pushed-breakseq-cond:
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [pattern-pushed-breakseq]
    - meta_include_prototype: false
    - include: prototype-ignore-rsquare
    - match: '\]'
      scope: symbol.rsquare.mcore
      pop: true
    #%%IMPORT=pattern-continuation("pattern-pushed-breakseq")
  pattern-pushed-breaktuple:
    #%%IMPORT=pattern("pattern-pushed-breaktuple-cond", "pattern-pushed-breaktuple", "pattern-pushed-concatseq-or-breaktuple", "pattern-pushed-concatident-or-breaktuple")
  pattern-pushed-concatseq-or-breaktuple:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breaktuple-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - include: pattern-pushed-breaktuple-cond
    #%%IMPORT=pattern("pattern-pushed-breaktuple-cond", "pattern-pushed-breaktuple", "pattern-pushed-concatseq-or-breaktuple", "pattern-pushed-concatident-or-breaktuple")
  pattern-pushed-concatident-or-breaktuple:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breaktuple-cond, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - include: pattern-pushed-breaktuple-cond
  pattern-pushed-pushseq-or-breaktuple-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breaktuple-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - include: pattern-pushed-breaktuple-cond
  pattern-pushed-breaktuple-cond:
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [pattern-pushed-breaktuple]
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
    #%%IMPORT=pattern-continuation("pattern-pushed-breaktuple")
  pattern-pushed-breakrecord:
    #%%IMPORT=pattern("pattern-pushed-breakrecord-cond", "pattern-pushed-breakrecord", "pattern-pushed-concatseq-or-breakrecord", "pattern-pushed-concatident-or-breakrecord")
  pattern-pushed-concatseq-or-breakrecord:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrecord-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - include: pattern-pushed-breakrecord-cond
    #%%IMPORT=pattern("pattern-pushed-breakrecord-cond", "pattern-pushed-breakrecord", "pattern-pushed-concatseq-or-breakrecord", "pattern-pushed-concatident-or-breakrecord")
  pattern-pushed-concatident-or-breakrecord:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-pushseq-or-breakrecord-cond, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - include: pattern-pushed-breakrecord-cond
  pattern-pushed-pushseq-or-breakrecord-cond:
    - match: '([+][+])'
      scope: keyword.operator.concat.mcore
      set: [pattern-pushed-breakrecord-cond, patternseq-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - include: pattern-pushed-breakrecord-cond
  pattern-pushed-breakrecord-cond:
    - match: '[,]'
      scope: symbol.comma.mcore
      set: [pattern-pushed-breakrecord, eqoperator-pushed, identifier-pushed]
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    #%%IMPORT=pattern-continuation("pattern-pushed-breakrecord")

  patternseq-pushed:
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
    - match: '\[\s*\]'
      scope: constant.language.mcore
      pop: true
    - match: '\['
      scope: symbol.lsquare.mcore
      set: [pattern-pushed-breakseq]

  ###                           ###
  ### Recursive Expression Body ###
  ###      (Not Top-Level)      ###
  ###                           ###
  recursive-body-pushed:
    - match: '\b(let)\b'
      scope: keyword.other.let.mcore
      set: [mexpr-pushed-breakrecbody, optidenttype-pushed-breakeq, identifier-pushed]
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true

  ###             ###
  ### Record Body ###
  ###             ###
  record-entry-pushed:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
      set: [record-eqorwith-pushed]
    - match: '(#(?:var|con|type))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          set: [record-eqorwith-pushed]
        - include: stringsymbol
        - meta_include_prototype: false
    - meta_include_prototype: false
    - include: prototype-ignore-rcurly
    - match: '\}'
      scope: symbol.rcurly.mcore
      pop: true
    - include: mexpr-pushed-breakrecordwith

  record-eqorwith-pushed:
    - match: '\b(with)\b'
      scope: keyword.other.with.mcore
      set: [mexpr-pushed-breakrecordend, eqoperator-pushed, identifier-pushed]
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      set: [mexpr-pushed-breakrecordcontinued]

  record-proj-label-pushed:
    - include: identifier-pushed
    - include: uinteger-pushed

  ###                ###
  ### String Symbols ###
  ###                ###
  string-pushed:
    - match: '(")'
      scope: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false
  stringsymbol:
    - match: '{{escapechar}}'
      scope: constant.character.escape.mcore
    - match: '[^"\\]'
      scope: string.character.mcore

  ###                   ###
  ### Identifier Tokens ###
  ###                   ###
  identifier-pushed:
    - match: '\b(?:({{builtin_ident}})|({{reserved_ident}})|(_)|({{ident}}))\b'
      captures:
        1: support.function.builtin.ident.mcore
        2: invalid.illegal.reserved.ident.mcore
        3: keyword.other.ignored.ident.mcore
        4: other.ident.mcore
      pop: true
    - match: '(#(?:var|con|type|label))(")'
      captures:
        1: keyword.directive.identifier.mcore
        2: string.quote.double.mcore
      set:
        - match: '(")'
          scope: string.quote.double.mcore
          pop: true
        - include: stringsymbol
        - meta_include_prototype: false

  ###                ###
  ### Integer Tokens ###
  ###                ###
  uinteger-pushed:
  - match: '[0-9]+'
    scope: constant.numeric.integer.mcore
    pop: true

  ###                          ###
  ### Pushed Singleton Symbols ###
  ###                          ###
  eqoperator-pushed:
    - match: '(=)'
      scope: keyword.operator.assignment.mcore
      pop: true
  colon-pushed:
    - match: '(:)'
      scope: symbol.colon.mcore
      pop: true
  rparen-pushed:
    - meta_include_prototype: false
    - include: prototype-ignore-rparen
    - match: '\)'
      scope: symbol.rparen.mcore
      pop: true
  rightarrow-pushed:
    - match: '(->)'
      scope: keyword.operator.right-arrow.mcore
      pop: true
  directive-in-pushed:
    - match: '\b(in)\b'
      scope: keyword.other.in.mcore
      pop: true
  directive-then-pushed:
    - match: '\b(then)\b'
      scope: keyword.other.then.mcore
      pop: true
